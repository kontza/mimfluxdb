// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mimfluxdb/dao/model"
)

func newRssi(db *gorm.DB, opts ...gen.DOOption) rssi {
	_rssi := rssi{}

	_rssi.rssiDo.UseDB(db, opts...)
	_rssi.rssiDo.UseModel(&model.Rssi{})

	tableName := _rssi.rssiDo.TableName()
	_rssi.ALL = field.NewAsterisk(tableName)
	_rssi.ID = field.NewInt64(tableName, "id")
	_rssi.DeviceID = field.NewInt64(tableName, "device_id")
	_rssi.RecordedAt = field.NewTime(tableName, "recorded_at")
	_rssi.Value = field.NewInt32(tableName, "value")

	_rssi.fillFieldMap()

	return _rssi
}

type rssi struct {
	rssiDo rssiDo

	ALL        field.Asterisk
	ID         field.Int64
	DeviceID   field.Int64
	RecordedAt field.Time
	Value      field.Int32

	fieldMap map[string]field.Expr
}

func (r rssi) Table(newTableName string) *rssi {
	r.rssiDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rssi) As(alias string) *rssi {
	r.rssiDo.DO = *(r.rssiDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rssi) updateTableName(table string) *rssi {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.DeviceID = field.NewInt64(table, "device_id")
	r.RecordedAt = field.NewTime(table, "recorded_at")
	r.Value = field.NewInt32(table, "value")

	r.fillFieldMap()

	return r
}

func (r *rssi) WithContext(ctx context.Context) *rssiDo { return r.rssiDo.WithContext(ctx) }

func (r rssi) TableName() string { return r.rssiDo.TableName() }

func (r rssi) Alias() string { return r.rssiDo.Alias() }

func (r rssi) Columns(cols ...field.Expr) gen.Columns { return r.rssiDo.Columns(cols...) }

func (r *rssi) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rssi) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 4)
	r.fieldMap["id"] = r.ID
	r.fieldMap["device_id"] = r.DeviceID
	r.fieldMap["recorded_at"] = r.RecordedAt
	r.fieldMap["value"] = r.Value
}

func (r rssi) clone(db *gorm.DB) rssi {
	r.rssiDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rssi) replaceDB(db *gorm.DB) rssi {
	r.rssiDo.ReplaceDB(db)
	return r
}

type rssiDo struct{ gen.DO }

func (r rssiDo) Debug() *rssiDo {
	return r.withDO(r.DO.Debug())
}

func (r rssiDo) WithContext(ctx context.Context) *rssiDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rssiDo) ReadDB() *rssiDo {
	return r.Clauses(dbresolver.Read)
}

func (r rssiDo) WriteDB() *rssiDo {
	return r.Clauses(dbresolver.Write)
}

func (r rssiDo) Session(config *gorm.Session) *rssiDo {
	return r.withDO(r.DO.Session(config))
}

func (r rssiDo) Clauses(conds ...clause.Expression) *rssiDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rssiDo) Returning(value interface{}, columns ...string) *rssiDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rssiDo) Not(conds ...gen.Condition) *rssiDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rssiDo) Or(conds ...gen.Condition) *rssiDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rssiDo) Select(conds ...field.Expr) *rssiDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rssiDo) Where(conds ...gen.Condition) *rssiDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rssiDo) Order(conds ...field.Expr) *rssiDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rssiDo) Distinct(cols ...field.Expr) *rssiDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rssiDo) Omit(cols ...field.Expr) *rssiDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rssiDo) Join(table schema.Tabler, on ...field.Expr) *rssiDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rssiDo) LeftJoin(table schema.Tabler, on ...field.Expr) *rssiDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rssiDo) RightJoin(table schema.Tabler, on ...field.Expr) *rssiDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rssiDo) Group(cols ...field.Expr) *rssiDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rssiDo) Having(conds ...gen.Condition) *rssiDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rssiDo) Limit(limit int) *rssiDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rssiDo) Offset(offset int) *rssiDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rssiDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *rssiDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rssiDo) Unscoped() *rssiDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rssiDo) Create(values ...*model.Rssi) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rssiDo) CreateInBatches(values []*model.Rssi, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rssiDo) Save(values ...*model.Rssi) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rssiDo) First() (*model.Rssi, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rssi), nil
	}
}

func (r rssiDo) Take() (*model.Rssi, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rssi), nil
	}
}

func (r rssiDo) Last() (*model.Rssi, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rssi), nil
	}
}

func (r rssiDo) Find() ([]*model.Rssi, error) {
	result, err := r.DO.Find()
	return result.([]*model.Rssi), err
}

func (r rssiDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Rssi, err error) {
	buf := make([]*model.Rssi, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rssiDo) FindInBatches(result *[]*model.Rssi, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rssiDo) Attrs(attrs ...field.AssignExpr) *rssiDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rssiDo) Assign(attrs ...field.AssignExpr) *rssiDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rssiDo) Joins(fields ...field.RelationField) *rssiDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rssiDo) Preload(fields ...field.RelationField) *rssiDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rssiDo) FirstOrInit() (*model.Rssi, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rssi), nil
	}
}

func (r rssiDo) FirstOrCreate() (*model.Rssi, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Rssi), nil
	}
}

func (r rssiDo) FindByPage(offset int, limit int) (result []*model.Rssi, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rssiDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rssiDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rssiDo) Delete(models ...*model.Rssi) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rssiDo) withDO(do gen.Dao) *rssiDo {
	r.DO = *do.(*gen.DO)
	return r
}
