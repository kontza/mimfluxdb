// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"mimfluxdb/dao/model"
)

func newTemperature(db *gorm.DB, opts ...gen.DOOption) temperature {
	_temperature := temperature{}

	_temperature.temperatureDo.UseDB(db, opts...)
	_temperature.temperatureDo.UseModel(&model.Temperature{})

	tableName := _temperature.temperatureDo.TableName()
	_temperature.ALL = field.NewAsterisk(tableName)
	_temperature.ID = field.NewInt64(tableName, "id")
	_temperature.DeviceID = field.NewInt64(tableName, "device_id")
	_temperature.RecordedAt = field.NewTime(tableName, "recorded_at")
	_temperature.Value = field.NewFloat64(tableName, "value")

	_temperature.fillFieldMap()

	return _temperature
}

type temperature struct {
	temperatureDo temperatureDo

	ALL        field.Asterisk
	ID         field.Int64
	DeviceID   field.Int64
	RecordedAt field.Time
	Value      field.Float64

	fieldMap map[string]field.Expr
}

func (t temperature) Table(newTableName string) *temperature {
	t.temperatureDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t temperature) As(alias string) *temperature {
	t.temperatureDo.DO = *(t.temperatureDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *temperature) updateTableName(table string) *temperature {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.DeviceID = field.NewInt64(table, "device_id")
	t.RecordedAt = field.NewTime(table, "recorded_at")
	t.Value = field.NewFloat64(table, "value")

	t.fillFieldMap()

	return t
}

func (t *temperature) WithContext(ctx context.Context) *temperatureDo {
	return t.temperatureDo.WithContext(ctx)
}

func (t temperature) TableName() string { return t.temperatureDo.TableName() }

func (t temperature) Alias() string { return t.temperatureDo.Alias() }

func (t temperature) Columns(cols ...field.Expr) gen.Columns { return t.temperatureDo.Columns(cols...) }

func (t *temperature) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *temperature) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 4)
	t.fieldMap["id"] = t.ID
	t.fieldMap["device_id"] = t.DeviceID
	t.fieldMap["recorded_at"] = t.RecordedAt
	t.fieldMap["value"] = t.Value
}

func (t temperature) clone(db *gorm.DB) temperature {
	t.temperatureDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t temperature) replaceDB(db *gorm.DB) temperature {
	t.temperatureDo.ReplaceDB(db)
	return t
}

type temperatureDo struct{ gen.DO }

func (t temperatureDo) Debug() *temperatureDo {
	return t.withDO(t.DO.Debug())
}

func (t temperatureDo) WithContext(ctx context.Context) *temperatureDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t temperatureDo) ReadDB() *temperatureDo {
	return t.Clauses(dbresolver.Read)
}

func (t temperatureDo) WriteDB() *temperatureDo {
	return t.Clauses(dbresolver.Write)
}

func (t temperatureDo) Session(config *gorm.Session) *temperatureDo {
	return t.withDO(t.DO.Session(config))
}

func (t temperatureDo) Clauses(conds ...clause.Expression) *temperatureDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t temperatureDo) Returning(value interface{}, columns ...string) *temperatureDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t temperatureDo) Not(conds ...gen.Condition) *temperatureDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t temperatureDo) Or(conds ...gen.Condition) *temperatureDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t temperatureDo) Select(conds ...field.Expr) *temperatureDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t temperatureDo) Where(conds ...gen.Condition) *temperatureDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t temperatureDo) Order(conds ...field.Expr) *temperatureDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t temperatureDo) Distinct(cols ...field.Expr) *temperatureDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t temperatureDo) Omit(cols ...field.Expr) *temperatureDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t temperatureDo) Join(table schema.Tabler, on ...field.Expr) *temperatureDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t temperatureDo) LeftJoin(table schema.Tabler, on ...field.Expr) *temperatureDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t temperatureDo) RightJoin(table schema.Tabler, on ...field.Expr) *temperatureDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t temperatureDo) Group(cols ...field.Expr) *temperatureDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t temperatureDo) Having(conds ...gen.Condition) *temperatureDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t temperatureDo) Limit(limit int) *temperatureDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t temperatureDo) Offset(offset int) *temperatureDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t temperatureDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *temperatureDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t temperatureDo) Unscoped() *temperatureDo {
	return t.withDO(t.DO.Unscoped())
}

func (t temperatureDo) Create(values ...*model.Temperature) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t temperatureDo) CreateInBatches(values []*model.Temperature, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t temperatureDo) Save(values ...*model.Temperature) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t temperatureDo) First() (*model.Temperature, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Temperature), nil
	}
}

func (t temperatureDo) Take() (*model.Temperature, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Temperature), nil
	}
}

func (t temperatureDo) Last() (*model.Temperature, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Temperature), nil
	}
}

func (t temperatureDo) Find() ([]*model.Temperature, error) {
	result, err := t.DO.Find()
	return result.([]*model.Temperature), err
}

func (t temperatureDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Temperature, err error) {
	buf := make([]*model.Temperature, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t temperatureDo) FindInBatches(result *[]*model.Temperature, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t temperatureDo) Attrs(attrs ...field.AssignExpr) *temperatureDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t temperatureDo) Assign(attrs ...field.AssignExpr) *temperatureDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t temperatureDo) Joins(fields ...field.RelationField) *temperatureDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t temperatureDo) Preload(fields ...field.RelationField) *temperatureDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t temperatureDo) FirstOrInit() (*model.Temperature, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Temperature), nil
	}
}

func (t temperatureDo) FirstOrCreate() (*model.Temperature, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Temperature), nil
	}
}

func (t temperatureDo) FindByPage(offset int, limit int) (result []*model.Temperature, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t temperatureDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t temperatureDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t temperatureDo) Delete(models ...*model.Temperature) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *temperatureDo) withDO(do gen.Dao) *temperatureDo {
	t.DO = *do.(*gen.DO)
	return t
}
